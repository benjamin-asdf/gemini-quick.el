* Concept

- I recently used to open LLM chat and paste text a lot.
- This is for automating this process and get the output in an emacs buffer.
- Gemini 2.0 is for free at the moment, just go [[https://ai.google.dev/gemini-api/docs/api-key][here]] and get an api key.

* Usage

- depends on [[https://github.com/tkf/emacs-request][=request=]]
- Load [[file:gemini-quick.el]]

- By default it reads *GEMINI_API_KEY* env var, else you
- set =gemini-api-key= to a function with no args
  returning a gemini api key.

  Example:

#+begin_src elisp
  (setf gemini-quick-api-key
        (let ((s))
    (lambda ()
      (setf s (shell-command-to-string "pass gai/gemini-api-key-1")))))
#+end_src

- Use =quick-gemini-chat=

** Complete setup example with use-package

#+begin_src elisp
  (when
    (use-package request :ensure t)
  (require
   'gemini-quick
   "path/gemini-quick.el/gemini-quick.el")

  ;; define key
  ;; (meow-leader-define-key
  ;;  '("H" . quick-gemini-chat))

  (setf
   gemini-quick-api-key
   ;; requires lexical binding enabled (M-x elisp-enable-lexical-binding for this file)
   (let ((s))
     (lambda ()
       (or s
           (setf
            s
            (shell-command-to-string
             "pass gai/api-key-2")))))))
#+end_src

- Use *return* inside a markdown code block to select the region,
  then for example narrow to region and ediff buffers, ad-lib.

* Configuration

- =gemini-model=
- (there is a list model endpoint, they are also listed [[https://ai.google.dev/gemini-api/docs/models/gemini][here]]).

#+begin_src elisp
(setf gemini-quick-model "gemini-2.0-flash")
#+end_src
